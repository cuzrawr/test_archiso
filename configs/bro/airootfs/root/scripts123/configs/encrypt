#!/usr/bin/ash

run_hook() {
    modprobe -a -q dm-crypt >/dev/null 2>&1
    # assigned by parse_cmdline
    # shellcheck disable=SC2154
    [ "${quiet}" = "y" ] && CSQUIET=">/dev/null"

    # Get keyfile if specified
    ckeyfile="/crypto_keyfile.bin"
    if [ -n "$cryptkey" ]; then
        IFS=: read -r ckdev ckarg1 ckarg2 <<EOF
$cryptkey
EOF

        # rootdelay is assigned by parse_cmdline
        # shellcheck disable=SC2154
        if [ "$ckdev" = "rootfs" ]; then
            ckeyfile=$ckarg1
        elif resolved=$(resolve_device "${ckdev}" "${rootdelay}"); then
            case ${ckarg1} in
                *[!0-9]*)
                    # Use a file on the device
                    # ckarg1 is not numeric: ckarg1=filesystem, ckarg2=path
                    mkdir /ckey
                    mount -r -t "$ckarg1" "$resolved" /ckey
                    dd if="/ckey/$ckarg2" of="$ckeyfile" >/dev/null 2>&1
                    umount /ckey
                    ;;
                *)
                    # Read raw data from the block device
                    # ckarg1 is numeric: ckarg1=offset, ckarg2=length
                    dd if="$resolved" of="$ckeyfile" bs=1 skip="$ckarg1" count="$ckarg2" >/dev/null 2>&1
                    ;;
            esac
        fi
        [ ! -f "${ckeyfile}" ] && echo "Keyfile could not be opened. Reverting to passphrase."
    fi

    if [ -n "${cryptdevice}" ]; then
        DEPRECATED_CRYPT=0
        IFS=: read -r cryptdev cryptname cryptoptions <<EOF
$cryptdevice
EOF
    else
        DEPRECATED_CRYPT=1
        cryptdev="${root}"
        cryptname="root"
    fi

    # This may happen if third party hooks do the crypt setup
    if [ -b "/dev/mapper/${cryptname}" ]; then
        echo "Device ${cryptname} already exists, not doing any crypt setup."
        return 0
    fi

    warn_deprecated() {
        echo "The syntax 'root=${root}' where '${root}' is an encrypted volume is deprecated"
        echo "Use 'cryptdevice=${root}:root root=/dev/mapper/root' instead."
    }

    set -f
    OLDIFS="$IFS"; IFS=,
    for cryptopt in ${cryptoptions}; do
        case ${cryptopt} in
            allow-discards|discard)
                cryptargs="${cryptargs} --allow-discards"
                ;;
            no-read-workqueue|perf-no_read_workqueue)
                cryptargs="${cryptargs} --perf-no_read_workqueue"
                ;;
            no-write-workqueue|perf-no_write_workqueue)
                cryptargs="${cryptargs} --perf-no_write_workqueue"
                ;;
            sector-size=*)
                cryptargs="${cryptargs} --sector-size ${cryptopt#*=}"
                ;;
            *)
                echo "Encryption option '${cryptopt}' not known, ignoring." >&2
                ;;
        esac
    done
    set +f
    IFS="$OLDIFS"
    unset OLDIFS

    if resolved=$(resolve_device "${cryptdev}" "${rootdelay}"); then
        if cryptsetup isLuks "${resolved}" >/dev/null 2>&1; then
            [ "${DEPRECATED_CRYPT}" -eq 1 ] && warn_deprecated
            dopassphrase=1
            # If keyfile exists, try to use that
            if [ -f "${ckeyfile}" ]; then
                if eval cryptsetup --key-file "${ckeyfile}" open --type luks "${resolved}" "${cryptname}" "${cryptargs}" "${CSQUIET}"; then
                    dopassphrase=0
                else
                    echo "Invalid keyfile. Reverting to passphrase."
                fi
            fi
            # Ask for a passphrase
            if [ "${dopassphrase}" -gt 0 ]; then
            	# CUSTOM
            	# Check if it's the first boot
                if echo -e "123\n" | cryptsetup luksOpen ${resolved} crypttest >/dev/null 2>&1; then
                    cryptsetup luksClose crypttest
                    # Prompt the user for a new password
                    echo "===Millitary grade encryption (LUKS) first boot wizard================English==="
                    echo "Welcome to setting up your new account! This is the first step where you will need to create a password. Please enter your new password below. Remember, this action cannot be undone, so be sure to choose a password that is secure and memorable for you                   "
                    echo ""
                    echo "===Millitärische Verschlüsselung (LUKS) erster Boot-Assistent=========Deutsch==="
                    echo "Willkommen beim Einrichten Ihres neuen Kontos! Dies ist der erste Schritt, bei dem Sie ein Passwort erstellen müssen. Bitte geben Sie unten Ihr neues Passwort ein. Denken Sie daran, dass dieser Vorgang nicht rückgängig gemacht werden kann. Wählen Sie also ein Passwort, das sicher und einprägsam ist                                                               "
                    echo "Enter your password ( input not visible ) and press enter: "
                    echo -n "Geben Sie Ihr Passwort ein (Eingabe nicht sichtbar) und drücken Sie die Eingabetaste: "
                    read -s new_password
                    echo
                    # Change LUKS password

                    echo -e "123\n${new_password}\n${new_password}" | cryptsetup luksChangeKey "${resolved}"
                    echo "Changing default LUKS password..."
                    echo "Ändern des Standard-LUKS-Passworts..."
                    echo -ne "#####                     (33%)\r"
                    sleep 1
                    echo -ne "#############             (66%)\r"
                    sleep 1
                    echo -ne "#######################   (100%)\r"
                    echo -ne "\n"

                    echo "IN NEXT MENU PROVIDE YOUR NEW PASSWORD TO BOOT YOUR NEW SYSTEM"
                    echo "GEBEN SIE IM NÄCHSTEN MENÜ IHR NEUES PASSWORT EIN, UM IHR NEUES SYSTEM ZU STARTEN"
                    echo -ne "#####                     (33%)\r"
                    sleep 2
                    echo -ne "#############             (66%)\r"
                    sleep 3
                    echo -ne "#######################   (100%)\r"
                    echo -ne "\n"

                    echo ""


                    # Remove old LUKS password
                    #echo "Removing old LUKS password..."
                    #echo -e "${old_password}" | cryptsetup luksKillSlot /dev/${cryptdev} 0

                    # Create a marker to indicate that the first boot is done
                    #touch /etc/.first_boot_done
                fi

                if command -v plymouth >/dev/null 2>&1 && plymouth --ping 2>/dev/null; then
                    plymouth ask-for-password \
                        --prompt="A password is required to access the ${cryptname} volume" \
                        --command="cryptsetup open --type luks --key-file=- ${resolved} ${cryptname} ${cryptargs} ${CSQUIET}"
                else
                    echo ""
                    echo "A password is required to access the ${cryptname} volume:"

                    #loop until we get a real password
                    while ! eval cryptsetup open --type luks "${resolved}" "${cryptname}" "${cryptargs}" "${CSQUIET}"; do
                        sleep 2;
                    done
                fi
            fi
            if [ -e "/dev/mapper/${cryptname}" ]; then
                if [ "${DEPRECATED_CRYPT}" -eq 1 ]; then
                    export root="/dev/mapper/root"
                fi
            else
                err "Password succeeded, but ${cryptname} creation failed, aborting..."
                return 1
            fi
        elif [ -n "${crypto}" ]; then
            [ "${DEPRECATED_CRYPT}" -eq 1 ] && warn_deprecated
            msg "Non-LUKS encrypted device found..."
            if echo "$crypto" | awk -F: '{ exit(NF == 5) }'; then
                err "Verify parameter format: crypto=hash:cipher:keysize:offset:skip"
                err "Non-LUKS decryption not attempted..."
                return 1
            fi
            exe="cryptsetup open --type plain $resolved $cryptname $cryptargs"
            IFS=: read -r c_hash c_cipher c_keysize c_offset c_skip <<EOF
$crypto
EOF
            [ -n "$c_hash" ]    && exe="$exe --hash '$c_hash'"
            [ -n "$c_cipher" ]  && exe="$exe --cipher '$c_cipher'"
            [ -n "$c_keysize" ] && exe="$exe --key-size '$c_keysize'"
            [ -n "$c_offset" ]  && exe="$exe --offset '$c_offset'"
            [ -n "$c_skip" ]    && exe="$exe --skip '$c_skip'"
            if [ -f "$ckeyfile" ]; then
                exe="$exe --key-file $ckeyfile"
            else
                echo ""
                echo "A password is required to access the ${cryptname} volume:"
            fi
            if ! eval "$exe $CSQUIET"; then
                err "Non-LUKS device decryption failed. verify format: "
                err "      crypto=hash:cipher:keysize:offset:skip"
                return 1
            fi
            if [ -e "/dev/mapper/${cryptname}" ]; then
                if [ "${DEPRECATED_CRYPT}" -eq 1 ]; then
                    export root="/dev/mapper/root"
                fi
            else
                err "Password succeeded, but ${cryptname} creation failed, aborting..."
                return 1
            fi
        else
            err "Failed to open encryption mapping: The device ${cryptdev} is not a LUKS volume and the crypto= paramater was not specified."
        fi
    fi
    rm -f "${ckeyfile}"
}

# vim: set ft=sh ts=4 sw=4 et:
